.global _start
_start:
		mov r0, #7
	
		bl funcion_hanoi

		1:b 1b               //Finalizacion del codigo

funcion_hanoi:
	PUSH {r4-r12, lr}
	
 cmp r0, #1               @ Caso base: solo hay un disco
    beq done                 @ Si solo hay un disco, terminar

    mov r12, r1              @ Mover el nombre del poste auxiliar a r12
    mov r11, r2              @ Mover el nombre del poste final a r11
    mov r10, r3              @ Mover el nombre del poste inicial a r10
    mov r1, r10              @ Mover el nombre del poste inicial a r1
    mov r2, r11              @ Mover el nombre del poste final a r2
    mov r3, r12              @ Mover el nombre del poste auxiliar a r3

    mov r4, r0               @ Mover el n√∫mero de discos a r4
 
		ldr r12, =0x01000	
		
       bl torreinicial 
torreinicial:
		push {r0,r7,lr}
		ldr r1, =0x12345678
		mov r7, #4
		mvn r0, r0
		add r0, r0, #9
		mul r0, r0, r7
		lsr r1, r1, r0
		pop {r0, r7}
		bl guardar_estado
		pop {lr}
	
	
 if:
    cmp r0, #1
	// esto me quedo igual que el original pero invertido( lo hice casi a mano)
	beq else
	
	push {r0, r9-r11, lr}
		sub r0, r0, #1
		add r11, r11, r10
		sub r10, r11, r10
		sub r11, r11, r10
		bl else
		pop {r0, r9-r11, lr}
		
		push {lr}
		cmp r9, #2	
		bl sort
		pop {lr}
		
		push {r0, r9-r11, lr}
		sub r0, r0, #1
		add r9, r9, r10
		sub r10, r9, r10
		sub r9, r9, r10
		bl else
		pop {r0, r9-r11, lr}
		mov pc, lr

 else:
		push {lr}
		cmp r9, #2	
		pop {lr}
		bl sort
		mov pc, lr
 sort:
 // esto es igual 
 push {r4, r5, r10}
		movgt r4, r3
		moveq r4, r2
		movlt r4, r1
		ldr r5, =0xffffffff
		mov r10, #0
		push {r4}
loop:
	ands r4, r5
	lslne r5, #4
	addne r10, #1
	bne loop

exit_loop:
	pop {r4}
	cmp r7, #1
	beq insertDisk

	// Se borra el primer disco de derecha a izquierda
	sub r10, #1
	lsl r10, #2
	mov r5, #0xf
	lsl r5, r10
	mvn r5, r5
	and r4, r5
	cmp r9,#2
	movgt r3, r4
	moveq r2, r4
	movlt r1, r4
	pop {r4, r5, r10}
	mov r7, #1
	cmp r11, #2
	b sort
	
insertDisk:
// lo copie directamente por si funcionaba 
			lsl r10, #2 
			lsl r5, r0, r10
			orr r4, r5
			cmp r11, #2 
			movgt r3, r4
			moveq r2, r4
			movlt r1, r4
			pop {r4, r5, r10}
			mov r7, #0	
done:
    ldmfd sp!, {lr, r4-r12}   // Restaurar los registros guardados
    bx lr                    // Retornar

			
guardar_estado:
			str r1, [r12], #4
			str r2, [r12], #4
			str r3, [r12], #8
		bl torreinicial
		    mov pc, lr
